<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.devit.repository.BoardRepository">

	<!-- 게시글 업로드 -->
		<!-- <insert id="upload"> -->
		<insert id="upload" useGeneratedKeys="true" keyProperty="boardId">
			insert into board(user_id, title, content, content_html, type, count, modified) 
			values(#{userId}, #{boardTitle}, #{boardContent}, #{boardContentHtml}, #{boardType}, #{boardCount}, now())
		</insert>
		
	<!-- 알림 업로드 -->
		<!-- <insert id="uploadNotice"> -->
		<insert id="uploadNotice">
			insert into notice(
				notice_type, 
				user_id,				 
				board_id
			)
			select  1, u.user_id, #{boardId}
			from user u			
			where u.active = 'Y';
		</insert>
		
   <!--  게시글 조회 -->
      <select id="info" resultType="BoardResponse">
      
      	 update board
      	    set count = count + 1
      	  where board_id = #{bid};
      	  
         select a.board_id as boardId, 
         		a.user_id as userId, 
         		b.nickname as userName, 
         		b.profile as profile, 
         		a.title as boardTitle, 
         		a.content as boardContent, 
         		a.content_html as boardContentHtml, 
         		a.type as boardType, 
         		a.created as boardCreated, 
         		a.count as boardCount, 
         		(select count(1) from board_reply where delete_yn = 'N' and board_id = a.board_id) as replyCount,
         		a.modified as boardModified,
         		if(a.user_id = #{userId}, 'Y', 'N') as isMine,
         		a.lecture_id as lectureId,
         		a.sub_id as subId
         from board a
		 left outer join user b on a.user_id = b.user_id
         where a.board_id = #{bid} and a.delete_yn = 'N';
      </select>
		
	<!--  게시글 삭제 -->
		<update id="delete">
			update board
			set delete_yn = 'Y', modified = now()
			where board_id = #{bid}
		</update>
		
	<!--  게시글 수정 -->
		<update id="update">
			update board
			set title = #{Board.boardTitle}, 
				content = #{Board.boardContent}, 
				content_html = #{Board.boardContentHtml}, 
				type = #{Board.boardType}, 
				count = #{Board.boardCount}, 
				modified = now()
			where board_id = #{bid}
		</update>
		
		
	<!-- 게시글 목록 조회 -->
	      <select id="listinfo" resultType="BoardResponse">
         select a.board_id as boardId, 
         		a.user_id as userId, 
         		b.nickname as userName, 
         		b.profile as profile,
         		a.title as boardTitle, 
         		case when length(a.content) > 20 then concat(substr(a.content, 1, 20), ' ...') else a.content end as boardContent, 
         		a.content as boardContentOrg, 
         		a.type as boardType, 
         		a.created as boardCreated, 
         		a.count as boardCount, 
         		(select count(1) from board_reply where delete_yn = 'N' and board_id = a.board_id) as replyCount,
         		a.modified as boardModified,
         		case when c.cnt is null then 0
                     when c.cnt = 0 then 0
                     else ceil(c.cnt/#{itemsperpage})
				end as pageCnt,
         		a.lecture_id as lectureId,
         		a.sub_id as subId
           from board a
		        left outer join 
		        user b 
		        on 
		        a.user_id = b.user_id
                left outer join
                (
         		 select count(1) as cnt
         		   from board a
         		        left outer join
         		        user b
         		        on
         		        a.user_id = b.user_id
         		  where a.type = #{type}
            		and a.delete_yn = 'N'
            		and a.lecture_id is null
            		<if test="searchtxt != null and searchtxt != ''">
						<if test="searchselect == '전체'">
						and (upper(a.title) like concat('%', upper(#{searchtxt}), '%') or
							upper(a.content) like concat('%', upper(#{searchtxt}), '%') or
							upper(b.nickname) like concat('%', upper(#{searchtxt}), '%')
							)
						</if>
						<if test="searchselect == '제목'">
						and upper(a.title) like concat('%', upper(#{searchtxt}), '%')
						</if>
						<if test="searchselect == '내용'">
						and upper(a.content) like concat('%', upper(#{searchtxt}), '%')
						</if>
						<if test="searchselect == '작성자'">
						and upper(b.nickname) like concat('%', upper(#{searchtxt}), '%')
						</if>
					</if>
				) c
				on
				1=1
          where a.type = #{type}
			<if test="searchtxt != null and searchtxt != ''">
				<if test="searchselect == '전체'">
				and (upper(a.title) like concat('%', upper(#{searchtxt}), '%') or
					upper(a.content) like concat('%', upper(#{searchtxt}), '%') or
					upper(b.nickname) like concat('%', upper(#{searchtxt}), '%')
					)
				</if>
				<if test="searchselect == '제목'">
				and upper(a.title) like concat('%', upper(#{searchtxt}), '%')
				</if>
				<if test="searchselect == '내용'">
				and upper(a.content) like concat('%', upper(#{searchtxt}), '%')
				</if>
				<if test="searchselect == '작성자'">
				and upper(b.nickname) like concat('%', upper(#{searchtxt}), '%')
				</if>
			</if>
            and a.delete_yn = 'N'
            and a.lecture_id is null
       order by a.board_id desc
		  limit #{startPage} , #{itemsperpage};
		  
      </select>
      
      
      	<!-- 강의 관련 질문 게시글 업로드 -->
		<insert id="createBoardWithLecture" useGeneratedKeys="true" keyProperty="boardId">
			insert into board(user_id, title, content, content_html, type, count, modified, lecture_id, sub_id) 
			values(#{userId}, #{boardTitle}, #{boardContent}, #{boardContentHtml}, 3, 0, now(), #{lectureId}, #{subId})
		</insert>
		
			
	<!-- 강의 관련 질문 게시글 목록 조회 -->
	      <select id="lectureQnaList" resultType="BoardResponse">
         select a.board_id as boardId, 
         		a.user_id as userId, 
         		b.nickname as userName, 
         		b.profile as profile,
         		a.title as boardTitle, 
         		case when length(a.content) > 20 then concat(substr(a.content, 1, 20), ' ...') else a.content end as boardContent,
         		a.content as boardContentOrg, 
         		a.type as boardType, 
         		a.created as boardCreated, 
         		a.count as boardCount, 
         		(select count(1) from board_reply where delete_yn = 'N' and board_id = a.board_id) as replyCount,
         		a.modified as boardModified,
         		a.lecture_id as lectureId,
         		a.sub_id as subId
           from board a
		        left outer join 
		        user b 
		        on 
		        a.user_id = b.user_id
          where a.type = 3
            and a.delete_yn = 'N'
            and a.lecture_id = #{lectureId}
            and a.sub_id = #{subId}
       order by a.board_id desc;
		  
      </select>
      
      
		
	<!-- 내가 쓴 게시글 목록 조회 -->
	      <select id="myBoardList" resultType="BoardResponse">
         select a.board_id as boardId, 
         		a.user_id as userId, 
         		b.nickname as userName, 
         		b.profile as profile,
         		a.title as boardTitle, 
         		case when length(a.content) > 20 then concat(substr(a.content, 1, 20), ' ...') else a.content end as boardContent,
         		a.content as boardContentOrg, 
         		a.type as boardType, 
         		a.created as boardCreated, 
         		a.count as boardCount, 
         		(select count(1) from board_reply where delete_yn = 'N' and board_id = a.board_id) as replyCount,
         		a.modified as boardModified,
         		case when c.cnt is null then 0
                     when c.cnt = 0 then 0
                     else ceil(c.cnt/#{itemsperpage})
				end as pageCnt
           from board a
		        inner join 
		        user b 
		        on 
		        a.user_id = b.user_id
                left outer join
                (
         		 select count(1) as cnt
         		   from board a
         		  where a.user_id = #{userId}
            		and a.delete_yn = 'N'
            		<!-- and a.lecture_id is null -->
				) c
				on
				1=1
          where a.user_id = #{userId}
            and a.delete_yn = 'N'
            <!-- and a.lecture_id is null -->
       order by a.board_id desc
		  limit #{startPage} , #{itemsperpage};
		  
      </select>
		
		
	<!-- 내가 쓴 댓글 목록 조회 -->
	      <select id="myReplyList" resultType="BoardResponse">
         select a.board_id as boardId, 
         		a.user_id as userId, 
         		b.nickname as userName, 
         		b.profile as profile,
         		case when length(c.reply_content) > 20 then concat(substr(c.reply_content, 1, 20), ' ...') else c.reply_content end as boardTitle,
         		c.reply_content as boardTitleOrg, 
         		a.title as boardContent, 
         		a.type as boardType, 
         		a.created as boardCreated, 
         		a.count as boardCount, 
         		(select count(1) from board_reply where delete_yn = 'N' and board_id = a.board_id) as replyCount,
         		a.modified as boardModified,
         		case when c.cnt is null then 0
                     when c.cnt = 0 then 0
                     else ceil(c.cnt/#{itemsperpage})
				end as pageCnt,
				c.board_reply_id as boardReplyId
           from board a
		        inner join 
		        user b 
		        on 
		        a.user_id = b.user_id
   		        inner join
   		        board_reply c
   		        on
   		        a.board_id = c.board_id
                left outer join
                (
         		 select count(1) as cnt
         		   from board a
         		        inner join
         		        board_reply b
         		        on
         		        a.board_id = b.board_id
         		  where b.user_id = #{userId}
            		and a.delete_yn = 'N'
            		and b.delete_yn = 'N'
            		<!-- and a.lecture_id is null -->
				) c
				on
				1=1
          where c.user_id = #{userId}
            and a.delete_yn = 'N'
            and c.delete_yn = 'N'
            <!-- and a.lecture_id is null -->
       order by c.board_reply_id desc
		  limit #{startPage} , #{itemsperpage};
		  
      </select>
      
      
	<!-- 게시글의 boardType 조회 -->
	      <select id="getBoardTypeById" resultType="long">
         select ifnull((select type from board where board_id = #{boardId}), 0) as boardType
           from dual;
		  
      </select>
</mapper>