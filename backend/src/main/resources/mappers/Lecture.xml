<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.devit.repository.LectureRepository">
	<!-- 대표 프로젝트 관련 -->
	<!-- common id 생성 및 key value 반환 -->
	<insert id="insertCommonId" useGeneratedKeys="true" keyProperty="commonId" parameterType="Common">
		INSERT INTO lecture_common VALUES()
	</insert>
	
	<!-- 더미 프로젝트 생성 및 반환 -->
	<insert id="insertLecture" useGeneratedKeys="true" keyProperty="lectureId" parameterType="LectureOneResponse">
		INSERT INTO lecture(user_id, common_id)
		VALUES(#{userId}, #{commonId});
		
		SELECT @lectureId := max(lecture_id) FROM lecture;
		
		INSERT INTO lecture_auth(lecture_id, user_id, lecture_role)
		VALUES(@lectureId, #{userId}, 'Owner')
	</insert>
	
	<!-- 대표 프로젝트 목록 받아오기  -->
	<select id="selectLectures" resultType="LecturesResponse">
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.view_count viewCount,
		    l.thumbnail_Url thumbnailUrl,
		    u.nickname,
		    u.profile,
		    COUNT(lsi.sub_id) lectureCount,
		    l.view_count viewCount,
		    IFNULL(likeCount, 0) AS likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        LEFT OUTER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    lecture_sub_index lsi ON l.lecture_id = lsi.lecture_id AND lsi.order != 0
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, COUNT(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        like_flag = 'Y'
		    GROUP BY lecture_id) ll ON l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        LEFT OUTER JOIN
		    (SELECT 
		        *
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId} AND like_flag = 'Y') lk ON lk.lecture_id = l.lecture_id
		WHERE
		    l.type = #{type}
		  and l.deleted_flag = 'N'
		GROUP BY l.lecture_id
		ORDER BY IFNULL(likeCount, 0) desc, l.lecture_id desc
		LIMIT #{startPage}, 20;
	</select>
	
	<!-- 대표 프로젝트 상세 정보 -->
	<select id="selectLectureByLectureId" resultType="LectureOneResponse">
				SELECT 
				l.lecture_id lectureId,
				l.title,
				l.type,
				l.user_id userId,
				l.common_id commonId,
				l.content,
				l.thumbnail_url thumbnailUrl,
				u.nickname,
				u.profile,
				l.created,
				COUNT(lsi.sub_id) lectureCount,
				l.view_count viewCount,
				ifnull(likeCount, 0) likeCount,
				lt.tagName,
				CASE WHEN lk.lecture_id IS NULL
					THEN FALSE
					ELSE TRUE
				END AS userLikeYn,
				CASE
					WHEN exists (select 1 from lecture_auth where lecture_id = l.lecture_id and user_id = #{userId} AND delete_yn = 'N')
                    THEN TRUE
					ELSE FALSE
				END AS manageYn		    
		  FROM lecture l
				LEFT OUTER JOIN user u
                ON l.user_id = u.user_id
				LEFT OUTER JOIN lecture_sub_index lsi
                ON l.lecture_id = lsi.lecture_id AND lsi.order != 0
					LEFT OUTER JOIN (SELECT lecture_id, count(1) AS likeCount
									   FROM lecture_like
									  WHERE lecture_id = #{lectureId} AND like_flag = 'Y'
					) ll 
					ON l.lecture_id = ll.lecture_id
					LEFT OUTER JOIN (SELECT common_id, GROUP_CONCAT(tag_name) tagName
									   FROM lecture_tag
								   GROUP BY common_id
                    ) lt
                    ON l.common_id = lt.common_id
					LEFT OUTER JOIN(SELECT lecture_id
									  FROM lecture_like
									 WHERE user_id = #{userId} AND like_flag = 'Y'
					) lk
				    ON lk.lecture_id = l.lecture_id
		WHERE l.lecture_id = #{lectureId}
		GROUP BY l.lecture_id
		ORDER BY l.lecture_id;
	</select>
	
	<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateFoundationLecture">
		UPDATE lecture
		SET
			title = #{title},
			thumbnail_url = #{thumbnailUrl},
			type = #{type},
			modified = now()
		WHERE lecture_id = #{lectureId};
	</update>
	
	<!-- Tag 삽입하기 -->
	<insert id="insertTags">
		DELETE FROM lecture_tag WHERE common_id = #{commonId};
		
		INSERT INTO lecture_tag(common_id, tag_name)
		VALUES
		<foreach collection="tags" item="tag" separator=", ">
			(#{commonId}, #{tag})
		</foreach>
	</insert>
	
	<!-- 프로젝트 기본 정보 수정 -->
	<update id="updateContentLecture">
		UPDATE lecture
		SET
			content = #{content},
			modified = now()
		WHERE lecture_id = #{lectureId}
	</update>
	
	<!-- 대표 프로젝트 관련 쿼리 끝 -->


	<!-- 소강의 관련 쿼리 -->
	<!-- 소강의 입력 -->
	<insert id="insertSubLecture">
		INSERT INTO lecture_sub_index(lecture_id, user_id, modifier, common_id, title, lecture_sub_index.order)
		VALUES(#{lectureId}, #{userId}, #{userId}, #{commonId}, #{title}, #{order})
	</insert>
	
	<!-- 소강의 업데이트 -->
	<update id="updateSubLecture">
		UPDATE lecture_sub_index
		SET
			modifier = #{userId},
			title = #{title},
			lecture_sub_index.order = #{order},
			modified = now()
		WHERE sub_id = #{subId}
	</update>
	
	<!-- 목차 불러오기 -->
	<select id="selectSubLectureIndex" resultType="LectureSubIndexResponse">
		SELECT 
		    lsi.lecture_id lectureId,
		    lsi.sub_id subId,
		    lsi.title,
		    lshv.play_time playTime,
		    lsi.order,
            lsi.common_id commonId,
            (select group_concat(tag_name) from lecture_tag where common_id = lsi.common_id) as tags,
            if( exists (select 1 from lecture_sub_history where lecture_id = lsi.lecture_id and sub_id = lsi.sub_id and sub_his_id = lsi.wiki_id and delete_yn = 'N'), true, false) as wikiYn,
            if( exists (select 1 from lecture_sub_history where lecture_id = lsi.lecture_id and sub_id = lsi.sub_id and sub_his_id = lsi.video_id and delete_yn = 'N'), true, false) as videoYn
		FROM
		    lecture_sub_index lsi
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, sub_id, sub_his_id, player_url, play_time
		    FROM
		        lecture_sub_history lshv
		    WHERE
		        lshv.lecture_id = #{lectureId}) lshv ON lsi.lecture_id = lshv.lecture_id
		        AND lsi.sub_id = lshv.sub_id
		        AND lsi.video_id = lshv.sub_his_id
		WHERE
		    lsi.lecture_id = #{lectureId} AND lsi.order != 0
		ORDER BY lsi.order;
	</select>
	<!-- 소강의 관련 쿼리 끝 -->
	
	
	<!-- tags  -->
	<select id="selectTags" resultType="TagResponse">
		SELECT 
    		tag_id tagId, tag_name tagName, COUNT(1) tagCount
		FROM
		    lecture_tag
		GROUP BY tag_name
		ORDER BY tagCount DESC;
	</select>
	
	<!-- 사용자가 좋아요를 눌렀는지 확인 -->
	<select id="checkLikeLectureByUserId" resultType="LikeDTO">
		SELECT 
		    COUNT(1) likeCount, like_flag likeFlag
		FROM
		    lecture_like
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId};
	</select>
	
	<!-- 프로젝트 좋아요 등록하기 -->
	<insert id="insertLikeLectureByUserId">
		INSERT INTO lecture_like(user_id, lecture_id)
		VALUES(#{userId}, #{lectureId});
	</insert>
	
	<!-- 사용자가 좋아요를 누른 경험이 있다면 -->
	<update id="updateLikeLectureByUserId">
		UPDATE lecture_like 
		SET 
		    like_flag = #{likeFlag}, modified = now()
		WHERE
		    user_id = #{userId} AND lecture_id = #{lectureId}
	</update>
	
	<!-- 사용자가 history를 좋아요를 눌렀는지 확인 -->
	<select id="checkLikeHistoryByUserId" resultType="LikeDTO">
		SELECT 
			COUNT(1) likeCount, like_flag likeFlag
		FROM
			lecture_sub_his_like
		WHERE
			user_id = #{userId} AND
			lecture_id = #{lectureId} AND
			sub_id = #{subId} AND
			sub_his_id = #{subHisId};
	</select>
	
	<!-- 히스토리 좋아요 등록하기 -->
	<insert id="insertLikeHistoryByUserId">
		INSERT INTO lecture_sub_his_like(lecture_id, sub_id, sub_his_id, user_id)
		VALUES(#{lectureId}, #{subId}, #{subHisId}, #{userId});
	</insert>
	
	<!-- 사용자가 히스토리 좋아요를 누른 경험이 있다면 -->
	<update id="updateLikeHistoryByUserId">
		UPDATE lecture_sub_his_like 
		SET 
		    like_flag = #{likeFlag}, modified = now()
		WHERE
		    user_id = #{userId}
		    AND lecture_id = #{lectureId}
		    AND sub_id = #{subId}
		    AND sub_his_id = #{subHisId}
	</update>
	
	<!-- 프로젝트 조회수 1증가 -->
	<update id="updateLectureViewCount">
		UPDATE lecture SET view_count = view_count+1
		WHERE lecture_id = #{lectureId};
	</update>
	
	<!-- 프로젝트 권한 생성 -->
	<insert id="insertAuthLecture">
		INSERT INTO lecture_auth(lecture_id, user_id, lecture_role)
		VALUES(#{lectureId}, #{userId}, #{role})
	</insert>
	
	<!-- 프로젝트 권한 등록 -->
	<insert id="insertLectureAuth">
		INSERT INTO lecture_auth(lecture_id, user_id, lecture_role)
		VALUES(#{lectureId}, #{userId}, #{lectureRole})
	</insert>
	
	<!-- 프로젝트 권한 수정 -->
	<update id="updateLectureAuth">
		UPDATE lecture_auth
		SET lecture_role = #{lectureRole}, modified = now()
		WHERE auth_id = #{authId}
	</update>

	<!-- 프로젝트 소유자 변경 -->
	<update id="changeLectureOwner">
		UPDATE lecture
		SET user_id = #{userId}, modified = now()
		WHERE lecture_id = #{lectureId}
	</update>
	
	<!-- 프로젝트 권한 제거 -->
	<update id="deleteLectureAuth">
		UPDATE lecture_auth
		SET delete_yn = 'Y'
		WHERE auth_id = #{authId}
	</update>
	
	<!-- 프로젝트에 포함된 공동 작업자 가져오기 -->
	<select id="selectRoleUsersByLectureId" resultType="LectureRoleUsersResponse">
		SELECT la.auth_id authId, la.lecture_id lectureId, la.user_id userId, u.nickname, u.email, u.profile, la.lecture_role role, la.created, la.modified
		FROM user u
		INNER JOIN lecture_auth la
		ON
		u.user_id = la.user_id AND
		lecture_id = #{lectureId} and la.delete_yn = 'N'
		where u.active = 'Y'
	</select>
	
	<!-- 목차 상세 정보 가져오기 -->
	<select id="selectOneSubLecture" resultType="LectureSubOneResponse">
		SELECT 
		    lsi.lecture_id lectureId,
		    lsi.sub_id subId,
		    lsi.order,
		    lsi.title,
		    lshv.sub_his_id subHisId,
		    lshv.view_count viewCount,
		    lg.video_like_count likeCount,
		    u.nickname,
            u.profile,
		    lshv.play_time playTime,
		    lshv.player_url playerUrl,
		    lshw.wiki_content wikiContent,
		    lshw.wiki_content_html wikiContentHtml,
		    lt.tagName,
		    lshv.thumbnail_url thumbnailUrl,
		    <![CDATA[
		    	if(1 < #{order}, true, false) prePage,
            	if(#{order} < (SELECT COUNT(1) FROM lecture_sub_index WHERE lecture_id = #{lectureId} AND lecture_sub_index.order != 0), true, false) tailPage,
		    ]]>
			(SELECT COUNT(1) FROM lecture_sub_index WHERE lecture_id = #{lectureId} AND lecture_sub_index.order != 0) AS lectureCount,
		    CASE
		        WHEN EXISTS(SELECT 1
		                	FROM lecture_sub_his_like
		                	WHERE like_flag = 'Y' AND
		                		  user_id = #{userId} AND
		                		  sub_his_id = lshv.sub_his_id)
		        THEN true
		        ELSE false
		    END AS userLikeYn
		FROM lecture_sub_index lsi
		     LEFT OUTER JOIN  user u
		     ON lsi.modifier = u.user_id
		     LEFT OUTER JOIN
		     (SELECT lecture_id,
		             sub_id,
		             sub_his_id,
		             player_url,
		             play_time,
		             view_count,
		             thumbnail_url
		      FROM lecture_sub_history lshv
		      WHERE lshv.lecture_id = #{lectureId}
		      ) lshv
		      ON lsi.lecture_id = lshv.lecture_id AND
		         lsi.sub_id = lshv.sub_id AND
		         lsi.video_id = lshv.sub_his_id
		      LEFT OUTER JOIN
		      (SELECT lecture_id,
		              sub_id,
		              sub_his_id,
		              wiki_content,
		              wiki_content_html
		       FROM lecture_sub_history lshw
		       WHERE lshw.lecture_id = #{lectureId}
		       ) lshw
		       ON lsi.lecture_id = lshw.lecture_id AND
		       lsi.sub_id = lshw.sub_id AND
		       lsi.wiki_id = lshw.sub_his_id
		       LEFT OUTER JOIN
		       (SELECT COUNT(1) video_like_count, sub_his_id, sub_id, lecture_id
		        FROM lecture_sub_his_like lshl
		    	WHERE lshl.lecture_id = #{lectureId} AND
		    		  like_flag = 'Y'
		    	GROUP BY sub_his_id , sub_id , lecture_id
		    	) lg
		    	ON lg.sub_his_id = lshv.sub_his_id AND
		    	lg.sub_id = lshv.sub_id AND
		    	lsi.lecture_id = lg.lecture_id
		        LEFT OUTER JOIN
		    	(SELECT common_id, GROUP_CONCAT(tag_name) tagName
		    	 FROM lecture_tag
		    	 GROUP BY common_id
		    	) lt
		    	ON lt.common_id = lsi.common_id
		WHERE
		    lsi.lecture_id = #{lectureId} AND lsi.order = #{order};
		    
		
		SELECT @subHisV := lsi.video_id FROM lecture_sub_index lsi WHERE lsi.lecture_id = #{lectureId} AND lsi.order = #{order};
		
		SELECT @subHisW := lsi.wiki_id FROM lecture_sub_index lsi WHERE lsi.lecture_id = #{lectureId} AND lsi.order = #{order};
		
		UPDATE lecture_sub_history SET view_count = view_count+1 WHERE sub_his_id = @subHisV;
		
		UPDATE lecture_sub_history SET view_count = view_count+1 WHERE sub_his_id = @subHisW;
	</select>
	
	<!-- 강의, 위키 리퀘스트 날리기 -->
	<insert id="insertSubHistory" useGeneratedKeys="true" keyProperty="subHisId" parameterType="LectureSubHistoryRequest" >
		INSERT INTO lecture_sub_history(lecture_id, sub_id, user_id, modifier, play_time, player_url, wiki_content, wiki_content_html, req_type, title, thumbnail_url)
		VALUES(#{lectureId}, #{subId}, #{userId}, #{userId}, concat(SUBSTRING_INDEX(#{playTime}, ':', 1),':', IF(SUBSTRING_INDEX(#{playTime}, ':', -1)&lt;10, concat('0',SUBSTRING_INDEX(#{playTime}, ':', -1)), SUBSTRING_INDEX(#{playTime}, ':', -1)) ), #{playerUrl}, #{wikiContent}, #{wikiContentHtml}, #{reqType}, #{title}, #{thumbnailUrl})
	</insert>
	<!-- 권한자에게 리퀘스트 알림 날리기 -->
	<insert id="uploadNoticeAuth">
		INSERT INTO notice(
			notice_type, 
    		user_id,    		 
    		sub_his_id, 
    		lecture_id, 
    		sub_id    		
		)
		select  3, la.user_id, lsh.sub_his_id, lsh.lecture_id, lsh.sub_id
		from lecture_sub_history lsh 
		left outer join lecture_auth la on lsh.lecture_id = la.lecture_id
		where lsh.sub_his_id = #{subHisId};
	</insert>
	
	<!-- 같은 종류의 다른 동영상 -->
	<select id="selectTheOtherSubLectures" resultType="TheOhterSubLectureResponse">
	 SELECT lsi.lecture_id lectureId,
		    lsi.sub_id subId,
            lsh.sub_his_id subHisId,
            lsi.order,
		    lsh.title,
		    lsh.player_url playerUrl,
		    lsh.play_time playTime,
		    lsh.view_count viewCount,
		    IFNULL(lg.like_count, 0) likeCount,
		    lsh.thumbnail_url thumbnailUrl,
            (SELECT nickname FROM user WHERE user_id = lsh.user_id) nickname,
            (SELECT profile FROM user WHERE user_id = lsh.user_id) profile,
		    CASE WHEN EXISTS( SELECT 1 FROM lecture_sub_his_like
		                	   WHERE like_flag = 'Y' 
		                	     AND user_id = #{userId}
		                         AND lecture_id = lsh.lecture_id
		                         AND sub_id = lsh.sub_id
		                         AND sub_his_id = lsh.sub_his_id)
		        THEN TRUE
		        ELSE FALSE
		    END userLikeYn,
            case when lsi.video_id = lsh.sub_his_id then 2 else 1 end as isMain
	   FROM lecture_sub_index lsi
		    LEFT OUTER JOIN
		    lecture_sub_history lsh 
		    ON 
		    lsi.lecture_id = lsh.lecture_id AND 
		    lsi.sub_id = lsh.sub_id AND 
		    lsh.req_type = 'video'
		    LEFT OUTER JOIN
		    (
		     SELECT COUNT(1) like_count, 
		     	    lecture_id, 
		     	    sub_id, 
		     	    sub_his_id
		       FROM lecture_sub_his_like lshl
			  where like_flag = 'Y'
		   GROUP BY sub_id , sub_his_id
            ) lg 
            ON 
            lsh.lecture_id = lg.lecture_id AND 
            lsh.sub_id = lg.sub_id AND 
            lsh.sub_his_id = lg.sub_his_id
		    LEFT OUTER JOIN
			(
			 SELECT COUNT(1) like_count, 
					lecture_id, 
					sub_id, 
					sub_his_id
			   FROM lecture_sub_his_like lshl
			  WHERE modified between DATE_ADD(now(), INTERVAL -7 DAY) and now()
		   GROUP BY sub_id, sub_his_id
			 ) lg_due
             ON 
             lsh.lecture_id = lg_due.lecture_id AND 
             lsh.sub_id = lg_due.sub_id AND 
             lsh.sub_his_id = lg_due.sub_his_id
	   WHERE lsi.sub_id = #{subId} 
         AND player_url IS NOT NULL
    order by isMain desc, IFNULL(lg_due.like_count, 0) desc, viewCount desc;
          
	</select>
	
	<!-- 같은 종류 다른 영상 눌렀을 경우 상세 정보 -->
	<select id="selectOneOtherSubLecture" resultType="LectureSubOneResponse">
		select lsi.lecture_id as lectureId,
			   lsi.sub_id as subId,
			   lsh.sub_his_id subHisId,
			   lsi.order,
               lsh.title as title,
               lsh.view_count as viewCount,
               (select count(1) from lecture_sub_his_like where lecture_id = #{lectureId} and sub_id = #{subId} and sub_his_id = #{subHisId} and like_flag = 'Y') as likeCount,
               u.nickname as nickname,
               u.profile as profile,
               lsh.play_time as playTime,
               lsh.player_url as playerUrl,
               lsh.thumbnail_url as thumbnailUrl,
               lshw.wiki_content as wikiContent,
               lshw.wiki_content_html as wikiContentHtml,
               (select group_concat(tag_name) from lecture_tag where common_id = lsi.common_id) as tagName,
               if(exists (select 1 from lecture_sub_his_like where lecture_id = #{lectureId} and sub_id = #{subId} and sub_his_id = #{subHisId} and user_id = #{userId} and like_flag = 'Y'), true, false) as userLikeYn,
               <![CDATA[
		   	   	if(1 < lsi.order, true, false) prePage,
			   	if(lsi.order < (SELECT COUNT(1) FROM lecture_sub_index WHERE lecture_id = #{lectureId} AND lecture_sub_index.order != 0), true, false) tailPage
		   	   ]]>               
          from lecture_sub_index lsi
               left outer join
               lecture_sub_history lsh
               on
               lsi.lecture_id = lsh.lecture_id and
               lsi.sub_id = lsh.sub_id and
               lsh.sub_his_id = #{subHisId}
               left outer join
               (
				select user_id, nickname, profile
                  from user
			   ) u
               on
               lsh.user_id = u.user_id
               left outer join
               lecture_sub_history lshw
               on
               lsi.wiki_id = lshw.sub_his_id
		 where lsi.lecture_id = #{lectureId}
           and lsi.sub_id = #{subId};
	</select>
	
	<!-- 요청 목록 리스트 가져오기 -->
	<select id="selectRequestLecturesList" resultType="RequestHistoryResponse">
	  SELECT u.profile, u.nickname, lsh.created, lsi.title subTitle, lsi.sub_id subId, lsh.accept_yn acceptYn,
			 lsh.req_type reqType, lsh.thumbnail_url thumbnailUrl, lsh.title hisTitle, lsh.player_url playerUrl,
             lsh.play_time playTime, lsh.wiki_content wikiContent, lsh.wiki_content_html wikiContentHtml, lsh.sub_his_id subHisId,
             lsh2.wiki_content indexWikiContent,
             lsh2.wiki_content_html indexWikiContentHtml,
             CASE
		        WHEN lsh.sub_his_id = lsi.wiki_id or lsh.sub_his_id = lsi.video_id THEN TRUE
		        ELSE FALSE
	    	 END AS mainId
		FROM lecture_sub_history lsh
	         LEFT OUTER JOIN user u
			   ON u.user_id = lsh.user_id
			 LEFT OUTER JOIN lecture_sub_index lsi
	           ON lsi.lecture_id = lsh.lecture_id
			  AND lsi.sub_id = lsh.sub_id
             LEFT OUTER JOIN lecture_sub_history lsh2
              ON lsh2.sub_his_id = lsi.wiki_id AND lsh2.req_type = 'wiki'
	   WHERE 1=1 AND lsh.lecture_id = #{lectureId}
	   		 <if test="reqType != 0">
	   		 	AND lsh.req_type IN
	   		 	<foreach collection="reqType" item="type" index="index" separator="," open="(" close=")">
	   		 		#{type}
	   		 	</foreach>
	   		 </if>
			 <if test="acceptType == 'allow'">
			 	AND lsh.accept_yn = 'Y'
			 </if>
			 <if test="acceptType == 'wait'">
			 	AND lsh.accept_yn IS NULL
			 </if>
			 <if test="acceptType == 'reject'">
			 	AND lsh.accept_yn = 'N'
			 </if>
	ORDER BY lsh.created DESC
	   LIMIT #{startPage}, 20;
	</select>
	
	<!-- 요청 리스트 요청받기 또는 거절하기 업데이트 하기 -->
	<update id="updateRequestLecture">
		UPDATE lecture_sub_history
		   SET accept_yn = #{type},
		   	   modified = now()
	     WHERE sub_his_id = #{subHisId};
	  
 	     <if test='type == "N" and reqType == "video"'>
	     	UPDATE lecture_sub_index 
			SET video_id = NULL
			WHERE sub_id = #{subId};
	     </if>
	     
   	     <if test='type == "N" and reqType == "wiki"'>
	     	UPDATE lecture_sub_index 
			SET wiki_id = NULL
			WHERE sub_id = #{subId};
	     </if>
	     
	     <if test='type == "Y" and reqType == "video"'>
	     	UPDATE lecture_sub_index
			   SET video_id = #{subHisId}
		  	 WHERE sub_id = #{subId};
	     </if>

		<if test='type == "Y" and reqType == "wiki"'>
			UPDATE lecture_sub_index
			   SET wiki_id = #{subHisId}
		  	 WHERE sub_id = #{subId};
		</if>
	</update>
	
	<!-- 요청자에게 피드백 알림 -->
	<insert id="uploadNoticeUser">
		INSERT INTO notice(
			notice_type, 
    		user_id,    		 
    		sub_his_id, 
    		lecture_id, 
    		sub_id    		
		)
		select  4, lsh.user_id, lsh.sub_his_id, lsh.lecture_id, lsh.sub_id
		from lecture_sub_history lsh		
		where lsh.sub_his_id = #{subHisId};	
	</insert>
	
	<!-- 내가 좋아요 한 프로젝트 목록 조회 -->
	      <select id="myLikeLectureList" resultType="LecturesResponse">
		SELECT 
		    l.lecture_id lectureId,
		    l.title,
		    l.user_id userId,
		    l.common_id commonId,
		    l.thumbnail_Url thumbnailUrl,
		    u.nickname,
		    u.profile,
		    IFNULL(lsi.cnt, 0) as lectureCount,
		    l.view_count viewCount,
		    IFNULL(likeCount, 0) AS likeCount,
		    lt.tagName,
		    CASE
		        WHEN lk.lecture_id IS NULL THEN FALSE
		        ELSE TRUE
		    END AS userLikeYn
		FROM
		    lecture l
		        INNER JOIN
		    user u ON l.user_id = u.user_id
		        LEFT OUTER JOIN
		    (
		     SELECT lecture_id, COUNT(1) AS cnt
		       from lecture_sub_index lsi
			  where lsi.order != 0
		   group by lecture_id
		    ) lsi ON l.lecture_id = lsi.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        lecture_id, COUNT(1) AS likeCount
		    FROM
		        lecture_like
		    WHERE
		        like_flag = 'Y'
		    GROUP BY lecture_id) ll ON l.lecture_id = ll.lecture_id
		        LEFT OUTER JOIN
		    (SELECT 
		        common_id, GROUP_CONCAT(tag_name) tagName
		    FROM
		        lecture_tag
		    GROUP BY common_id) lt ON l.common_id = lt.common_id
		        INNER JOIN
		    (SELECT 
		        *
		    FROM
		        lecture_like
		    WHERE
		        user_id = #{userId} AND like_flag = 'Y') lk ON lk.lecture_id = l.lecture_id
		WHERE
		    1=1
		  and l.deleted_flag = 'N'
		ORDER BY lk.modified desc
		LIMIT #{startPage}, #{itemsperpage};
      </select>
      
      
	<!-- 내가 좋아요한 동영상 목록 조회 -->
	<select id="myLikeVideoList" resultType="TheOhterSubLectureResponse">
		SELECT 
		    lsi.lecture_id lectureId,
		    lsi.sub_id subId,
            lsh.sub_his_id subHisId,
		    lsh.title,
		    lsh.player_url playerUrl,
		    lsh.play_time playTime,
		    lsh.view_count viewCount,
		    IFNULL(lg.like_count, 0) likeCount,
		    lsh.thumbnail_url thumbnailUrl,
            (SELECT nickname FROM user WHERE user_id = lsh.user_id) nickname,
            (SELECT profile FROM user WHERE user_id = lsh.user_id) profile,
		    TRUE as userLikeYn
		FROM
		    lecture_sub_index lsi
		        INNER JOIN
		    lecture_sub_history lsh ON lsi.lecture_id = lsh.lecture_id
		        AND lsi.sub_id = lsh.sub_id
		        AND lsh.req_type = 'video'
		        INNER JOIN
		        (
		         select lecture_id, sub_id, sub_his_id, modified
		           from lecture_sub_his_like
		          where user_id = #{userId}
		            and like_flag = 'Y'
		         ) lshl
		        on
		        lsh.lecture_id = lshl.lecture_id and
		        lsh.sub_id = lshl.sub_id and
		        lsh.sub_his_id = lshl.sub_his_id
		        LEFT OUTER JOIN
		    (SELECT 
		        COUNT(1) like_count, lecture_id, sub_id, sub_his_id
		    FROM
		        lecture_sub_his_like lshl
			  WHERE like_flag = 'Y'
		    GROUP BY sub_id , sub_his_id) lg ON lsh.lecture_id = lg.lecture_id
		        AND lsh.sub_id = lg.sub_id
		        AND lsh.sub_his_id = lg.sub_his_id
		WHERE
		    lsh.player_url IS NOT NULL
	      and lsh.delete_yn = 'N'
     ORDER BY lshl.modified desc;
	</select>
			
		
	<!-- 내가 관리중인 프로젝트 목록 조회 -->
    <select id="myMngLectureList" resultType="LecturesResponse">
		 SELECT l.lecture_id lectureId,
			    l.title,
			    l.content,
			    l.user_id userId,
			    l.common_id commonId,
			    l.view_count viewCount,
			    l.thumbnail_Url thumbnailUrl,
			    u.nickname,
			    u.profile,
			    COUNT(lsi.sub_id) lectureCount,
			    l.view_count viewCount,
			    IFNULL(likeCount, 0) AS likeCount,
			    lt.tagName,
			    CASE
			        WHEN exists (select 1 from lecture_like where lecture_id = l.lecture_id and user_id = #{userId}) THEN FALSE
			        ELSE TRUE
			    END AS userLikeYn,
			    CASE
			    	WHEN la.lecture_role = 'Owner' THEN 'Y'
			    	ELSE 'N'
			    END AS isOwner
		   FROM lecture l
			    INNER JOIN
			    user u 
			    ON 
			    l.user_id = u.user_id
			    LEFT OUTER JOIN
			    lecture_sub_index lsi 
			    ON 
			    l.lecture_id = lsi.lecture_id
			    LEFT OUTER JOIN
			    (
			    SELECT lecture_id, 
			           COUNT(1) AS likeCount
			      FROM lecture_like
			     WHERE like_flag = 'Y'
			  GROUP BY lecture_id
			     ) ll 
			     ON 
			     l.lecture_id = ll.lecture_id
			     LEFT OUTER JOIN
			     ( 
			     SELECT common_id, 
			            GROUP_CONCAT(tag_name) tagName
			       FROM lecture_tag
			   GROUP BY common_id
			     ) lt 
			     ON 
			     l.common_id = lt.common_id
			     INNER JOIN
			     (
			     SELECT lecture_id, modified, lecture_role
			       FROM lecture_auth
			      WHERE user_id = #{userId} 
			        AND delete_yn = 'N'
			     ) la
			     ON 
			     la.lecture_id = l.lecture_id
		   WHERE 1=1
		     and l.deleted_flag = 'N'
		GROUP BY l.lecture_id
		ORDER BY la.modified desc
		   LIMIT #{startPage}, #{itemsperpage};
      </select>
      
      <!-- 변경 사항  이력 가져오기 -->
      <select id="selectChangeHistoryList" resultType="ChangeHistoryResponse">
	        SELECT lsh.sub_id subId,
		           lsh.sub_his_id subHisId,
		           lsh.created,
		           lsh.modified,
		           (SELECT title FROM lecture_sub_index WHERE sub_id = lsh.sub_id) title,
		           lsh.thumbnail_url thumbnailUrl,
		           lsh.play_time playTime,
		           lsh.player_url playerUrl,
		           lsh.wiki_content wikiContent,
		           lsh.wiki_content_html wikiContentHtml,
		           lsh.view_count viewCount,
		           lsh.req_type reqType,
		           lsh.accept_yn acceptYn,
		           u.user_id userId,
		           u.nickname,
		           u.profile,
                   u.email
			  FROM lecture_sub_history lsh
					LEFT OUTER JOIN user u
		            ON
		            lsh.modifier = u.user_id
			 WHERE lsh.lecture_id = #{lectureId}
		  ORDER BY modified DESC;
      </select>
      
      <!-- 프로젝트 소유 권한 여부 조회 -->
      <select id="checkUserManageAuth" resultType="String">
      		select case when exists(select 1 from lecture_auth where user_id = #{userId} and lecture_id = #{lectureId} and delete_yn = 'N' and lecture_role = 'Owner')
      		            then 'Y'
      		            else 'N'
      		            end as isOwner
      		  from dual;
      </select>
      
      <!-- 프로젝트 강의 존재 여부 조회 -->
      <select id="checkHasSubHistory" resultType="String">
      		select case when exists(select 1 from lecture_sub_history where lecture_id = #{lectureId})
      		            then 'Y'
      		            else 'N'
      		            end as hasSubHistory
      		  from dual;
      </select>
	
	<!-- 프로젝트 삭제 -->
	<update id="deleteLecture">
		UPDATE lecture
		   SET deleted_flag = 'Y',
			   modified = now()
		 WHERE lecture_id = #{lectureId};
	</update>
	
	
	<!-- 나의 요청 목록 리스트 가져오기 -->
	<select id="myReqList" resultType="RequestHistoryResponse">
	  SELECT l.title as lectureTitle,
	  		 l.thumbnail_url as lectureThumbnailUrl,
	  		 u.profile, 
	  		 u.nickname, 
	  		 lsh.created, 
	  		 lsi.title subTitle, 
	  		 lsi.sub_id subId, 
	  		 lsh.accept_yn acceptYn,
			 lsh.req_type reqType, 
			 lsh.thumbnail_url thumbnailUrl, 
			 lsh.title hisTitle, 
			 lsh.player_url playerUrl,
             lsh.play_time playTime, 
             lsh.wiki_content wikiContent, 
             lsh.wiki_content_html wikiContentHtml, 
             lsh_org.wiki_content indexWikiContent,
             lsh_org.wiki_content_html indexWikiContentHtml,
             lsh.sub_his_id subHisId,
             CASE
		        WHEN lsh.sub_his_id = lsi.wiki_id or lsh.sub_his_id = lsi.video_id THEN TRUE
		        ELSE FALSE
	    	 END AS mainId
		FROM lecture_sub_history lsh
	         LEFT OUTER JOIN 
	         user u
			 ON 
			 u.user_id = lsh.user_id
			 LEFT OUTER JOIN 
			 lecture_sub_index lsi
	         ON 
	         lsi.lecture_id = lsh.lecture_id AND 
	         lsi.sub_id = lsh.sub_id
	         LEFT OUTER JOIN
	         lecture l
	         on
	         lsh.lecture_id = l.lecture_id
	         LEFT OUTER JOIN
	         lecture_sub_history lsh_org
	         ON
	         lsh_org.sub_his_id = lsi.wiki_id AND 
	         lsh_org.req_type = 'wiki'
	   WHERE 1=1 
	     AND lsh.user_id = #{userId}
	     and lsh.req_type in ('video', 'wiki')
	ORDER BY lsh.created DESC
	   LIMIT #{startPage}, #{itemsperpage};
	</select>
	
	
	<!-- 최근 좋아요 많이 받은 프로젝트 -->
	      <select id="bestLectureList" resultType="LecturesResponse">
	 SELECT l.lecture_id lectureId,
			l.title,
			l.user_id userId,
			l.common_id commonId,
			l.thumbnail_Url thumbnailUrl,
			u.nickname,
			u.profile,
		    IFNULL(lsi.cnt, 0) as lectureCount,
			l.view_count viewCount,
			IFNULL(likeCount, 0) AS likeCount,
			lt.tagName,
			CASE
				WHEN exists (SELECT 1 FROM lecture_like WHERE user_id = #{userId} AND like_flag = 'Y') THEN TRUE
				ELSE FALSE
			END AS userLikeYn
	   FROM lecture l
			INNER JOIN
			user u
			ON 
            l.user_id = u.user_id
			LEFT OUTER JOIN
		    (
		     SELECT lecture_id, COUNT(1) AS cnt
		       from lecture_sub_index lsi
			  where lsi.order != 0
		   group by lecture_id
		    ) lsi 
            ON 
            l.lecture_id = lsi.lecture_id
			LEFT OUTER JOIN
		    (
             SELECT lecture_id, COUNT(1) AS likeCount
			   FROM lecture_like
			  WHERE like_flag = 'Y'
		   GROUP BY lecture_id
			) ll
            ON 
            l.lecture_id = ll.lecture_id
			LEFT OUTER JOIN
		    (
             SELECT lecture_id, COUNT(1) AS likeCountInWeek
			   FROM lecture_like
			  WHERE like_flag = 'Y'
				AND modified between DATE_ADD(now(), INTERVAL -7 DAY) and now()
		   GROUP BY lecture_id
			) lcw
            ON 
            l.lecture_id = lcw.lecture_id
		    LEFT OUTER JOIN
		    (
             SELECT common_id, GROUP_CONCAT(tag_name) tagName
			   FROM lecture_tag
		   GROUP BY common_id
            ) lt 
            ON 
            l.common_id = lt.common_id
	  WHERE 1=1
		AND l.deleted_flag = 'N'
   GROUP BY l.lecture_id
   ORDER BY likeCountInWeek desc, l.lecture_id desc
	  LIMIT 0, 6;
      </select>
      
      
	<!-- 최근 좋아요 많이 받은 동영상 -->
	<select id="bestVideoList" resultType="TheOhterSubLectureResponse">
	 SELECT lsi.lecture_id lectureId,
			lsi.sub_id subId,
			lsh.sub_his_id subHisId,
			lsh.title,
			lsh.player_url playerUrl,
			lsh.play_time playTime,
			lsh.view_count viewCount,
			IFNULL(lg.like_count, 0) likeCount,
			lsh.thumbnail_url thumbnailUrl,
			(SELECT nickname FROM user WHERE user_id = lsh.user_id) nickname,
			(SELECT profile FROM user WHERE user_id = lsh.user_id) profile,
			CASE
				WHEN exists (select 1 from lecture_sub_his_like where user_id = #{userId} and like_flag = 'Y') THEN TRUE
				ELSE FALSE
			END AS userLikeYn
	   FROM lecture_sub_index lsi
			INNER JOIN
		    lecture_sub_history lsh 
            ON 
            lsi.lecture_id = lsh.lecture_id AND 
            lsi.sub_id = lsh.sub_id AND 
            lsh.req_type = 'video'
			LEFT OUTER JOIN
		    (
             SELECT COUNT(1) like_count, lecture_id, sub_id, sub_his_id
			   FROM lecture_sub_his_like lshl
			  WHERE like_flag = 'Y'
		   GROUP BY sub_id, sub_his_id
            ) lg 
            ON 
            lsh.lecture_id = lg.lecture_id AND 
            lsh.sub_id = lg.sub_id AND 
            lsh.sub_his_id = lg.sub_his_id
			LEFT OUTER JOIN
		    (
             SELECT COUNT(1) likeCntInWeek, lecture_id, sub_id, sub_his_id
			   FROM lecture_sub_his_like lshl
			  WHERE like_flag = 'Y'
				AND modified between DATE_ADD(now(), INTERVAL -7 DAY) and now()
		   GROUP BY sub_id, sub_his_id
            ) lgw
            ON 
            lsh.lecture_id = lgw.lecture_id AND 
            lsh.sub_id = lgw.sub_id AND 
            lsh.sub_his_id = lgw.sub_his_id
	  WHERE lsh.player_url IS NOT NULL
	    and lsh.delete_yn = 'N'
   ORDER BY likeCntInWeek desc, lsh.sub_his_id desc
	  LIMIT 0, 6;
	</select>
			
		
</mapper>